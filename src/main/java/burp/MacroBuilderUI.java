/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package burp;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/**
 *
 * @author daike
 */
public class MacroBuilderUI extends javax.swing.JPanel {

    ArrayList<PRequestResponse> rlist = null;
    ParmGenMacroTrace pmt = null;

    DefaultListModel<String> RequestListModel = null;

    /**
     * Creates new form MacroBuilderUI
     */
    public MacroBuilderUI(ParmGenMacroTrace _pmt) {
        pmt = _pmt;
        initComponents();
        RequestList.setCellRenderer(new MacroBuilderUIRequestListRender(this));
        RequestListModel = new DefaultListModel();
        RequestListModel.clear();
        RequestList.setModel(RequestListModel);

        pmt.setUI(this);

        pmt.setMBExec(MBExec.isSelected());
        pmt.setMBCookieUpdate(MBCookieUpdate.isSelected());
        pmt.setMBCookieFromJar(MBCookieFromJar.isSelected());
        pmt.setMBFinalResponse(FinalResponse.isSelected());
        pmt.setMBResetToOriginal(MBResetToOriginal.isSelected());
        pmt.setMBdeletesetcookies(MBdeleteSetCookies.isSelected());

    }

    ParmGenMacroTrace getParmGenMacroTrace() {
        return pmt;
    }

    void clear() {
        //JListをクリアするには、modelのremove & jListへModelセットが必須。
        RequestListModel.removeAllElements();
        RequestList.setModel(RequestListModel);
        MacroRequest.setText("");
        MacroResponse.setText("");
        MacroComments.setText("");
        rlist = null;
        if (pmt != null) {
            pmt.clear();
        }
    }

    void addNewRequests(ArrayList<PRequestResponse> _rlist) {
        DefaultListModel lmodel = new DefaultListModel();
        AppParmsIni pini;
        if (_rlist != null) {
            rlist = _rlist;
            if (pmt != null) {
                pmt.setRecords(_rlist);
                pmt.ParseResponse();
            }
            Iterator<PRequestResponse> it = _rlist.iterator();
            int ii = 0;
            while (it.hasNext()) {

                //model.addRow(new Object[] {false, pini.url, pini.getIniValDsp(), pini.getLenDsp(), pini.getTypeValDsp(),pini.getAppValuesDsp(),pini.getCurrentValue()});
                PRequestResponse pqr = it.next();
                String url = pqr.request.url;
                lmodel.addElement((Object) (ii++ + ' ' + url));
            }
            RequestList.setModel(lmodel);
        }

    }

    void updateCurrentReqRes() {
        int cpos = pmt.getCurrentRequest();
        if (rlist != null) {
            PRequestResponse pqr = rlist.get(cpos);
            String reqstr = pqr.request.getMessage();
            int len = ParmVars.displaylength > reqstr.length()?reqstr.length():ParmVars.displaylength;
             Reader reqrd = new java.io.StringReader(reqstr.substring(0, len));
                try {
                    MacroRequest.read(reqrd, null);
                } catch (IOException ex) {
                    ParmVars.plog.printException(ex);
                }
            //MacroRequest.setText(pqr.request.getMessage());
            String resstr = pqr.response.getMessage();
            len = ParmVars.displaylength > resstr.length() ? resstr.length():ParmVars.displaylength;
            MacroResponse.setText(resstr.substring(0, len));
            MacroComments.setText(pqr.getComments());
        }
    }

    public void Redraw() {
        //ListModel cmodel = RequestList.getModel();
        //RequestList.setModel(cmodel);
        RequestList.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        SendTo = new javax.swing.JMenu();
        Repeater = new javax.swing.JMenuItem();
        Scanner = new javax.swing.JMenuItem();
        Intruder = new javax.swing.JMenuItem();
        targetRequest = new javax.swing.JMenuItem();
        disableRequest = new javax.swing.JMenuItem();
        enableRequest = new javax.swing.JMenuItem();
        RequestEdit = new javax.swing.JPopupMenu();
        edit = new javax.swing.JMenuItem();
        ResponseShow = new javax.swing.JPopupMenu();
        show = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        RequestList = new javax.swing.JList();
        paramlog = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        MacroRequest = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        MacroResponse = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        MacroComments = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        ClearMacro = new javax.swing.JButton();
        MBExec = new javax.swing.JCheckBox();
        MBCookieUpdate = new javax.swing.JCheckBox();
        MBCookieFromJar = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        waitsec = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        FinalResponse = new javax.swing.JCheckBox();
        MBResetToOriginal = new javax.swing.JCheckBox();
        MBdeleteSetCookies = new javax.swing.JCheckBox();
        ParamTracking = new javax.swing.JButton();
        Load = new javax.swing.JButton();
        MBcleatokenfromcache = new javax.swing.JCheckBox();
        Save = new javax.swing.JButton();
        MBfromStepNo = new javax.swing.JCheckBox();

        SendTo.setText("SendTo");

        Repeater.setText("Repeater");
        Repeater.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RepeaterActionPerformed(evt);
            }
        });
        SendTo.add(Repeater);

        Scanner.setText("Scanner");
        Scanner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScannerActionPerformed(evt);
            }
        });
        SendTo.add(Scanner);

        Intruder.setText("Intruder");
        Intruder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IntruderActionPerformed(evt);
            }
        });
        SendTo.add(Intruder);

        jPopupMenu1.add(SendTo);

        targetRequest.setText("targetRequest");
        targetRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetRequestActionPerformed(evt);
            }
        });
        jPopupMenu1.add(targetRequest);

        disableRequest.setText("disableRequest");
        disableRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableRequestActionPerformed(evt);
            }
        });
        jPopupMenu1.add(disableRequest);

        enableRequest.setText("enableRequest");
        enableRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableRequestActionPerformed(evt);
            }
        });
        jPopupMenu1.add(enableRequest);

        edit.setText("jMenuItem1");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        RequestEdit.add(edit);

        show.setText("jMenuItem1");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });
        ResponseShow.add(show);

        jScrollPane1.setAutoscrolls(true);

        RequestList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        RequestList.setAutoscrolls(false);
        RequestList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RequestListMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RequestListMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RequestListMouseReleased(evt);
            }
        });
        RequestList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                RequestListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(RequestList);

        MacroRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MacroRequestMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MacroRequestMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MacroRequestMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(MacroRequest);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
        );

        paramlog.addTab("リクエスト", jPanel1);

        MacroResponse.setColumns(20);
        MacroResponse.setRows(5);
        MacroResponse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MacroResponseMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MacroResponseMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MacroResponseMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(MacroResponse);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
        );

        paramlog.addTab("レスポンス", jPanel2);

        MacroComments.setColumns(20);
        MacroComments.setRows(5);
        jScrollPane5.setViewportView(MacroComments);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
        );

        paramlog.addTab("追跡", jPanel3);

        jButton2.setText("編集");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ClearMacro.setText("クリア");
        ClearMacro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearMacroActionPerformed(evt);
            }
        });

        MBExec.setText("実行");
        MBExec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBExecActionPerformed(evt);
            }
        });

        MBCookieUpdate.setText("Cookie更新");
        MBCookieUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBCookieUpdateActionPerformed(evt);
            }
        });

        MBCookieFromJar.setText("開始時Cookie.jarから引き継ぐ");
        MBCookieFromJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBCookieFromJarActionPerformed(evt);
            }
        });

        jLabel2.setText("マクロリクエスト一覧");

        waitsec.setText("1");

        jCheckBox2.setText("WaitTimer(sec)");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        FinalResponse.setSelected(true);
        FinalResponse.setText("final response");
        FinalResponse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinalResponseActionPerformed(evt);
            }
        });

        MBResetToOriginal.setSelected(true);
        MBResetToOriginal.setText("オリジナルにリセット");
        MBResetToOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBResetToOriginalActionPerformed(evt);
            }
        });

        MBdeleteSetCookies.setSelected(true);
        MBdeleteSetCookies.setText("delete setcookies from Request");
        MBdeleteSetCookies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBdeleteSetCookiesActionPerformed(evt);
            }
        });

        ParamTracking.setText("追跡");
        ParamTracking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamTrackingActionPerformed(evt);
            }
        });

        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        MBcleatokenfromcache.setText("開始時tokenをキャッシュから引き継ぐ");
        MBcleatokenfromcache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBcleatokenfromcacheActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        MBfromStepNo.setSelected(true);
        MBfromStepNo.setText("追跡from設定");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox2)
                        .addGap(18, 18, 18)
                        .addComponent(waitsec, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(FinalResponse))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MBExec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MBCookieUpdate))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MBCookieFromJar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MBResetToOriginal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MBfromStepNo))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MBdeleteSetCookies)
                                .addGap(18, 18, 18)
                                .addComponent(MBcleatokenfromcache, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                            .addComponent(ClearMacro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ParamTracking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Load, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(paramlog, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(MBdeleteSetCookies)
                    .addComponent(MBcleatokenfromcache))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MBExec)
                    .addComponent(MBCookieUpdate)
                    .addComponent(MBCookieFromJar)
                    .addComponent(MBResetToOriginal)
                    .addComponent(MBfromStepNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waitsec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2)
                    .addComponent(FinalResponse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ClearMacro)
                        .addGap(9, 9, 9)
                        .addComponent(ParamTracking)
                        .addGap(13, 13, 13)
                        .addComponent(Load)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Save))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paramlog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(272, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton2ActionPerformed

    private void RequestListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_RequestListValueChanged
        // TODO add your handling code here:

        int pos = RequestList.getSelectedIndex();
        if (pos != -1) {

            if (rlist != null && rlist.size() > pos) {
                //

                //DefaultListModel lmodel = new DefaultListModel();

                PRequestResponse pqr = rlist.get(pos);
/***
                Reader reqrd = new java.io.StringReader(ParmGenUtil.LFinsert(pqr.request.getMessage()));

                try {
                    MacroRequest.setVisible(false);
                    ParmVars.plog.debuglog(0, "before read");
                    ;
                    MacroRequest.read(reqrd, null);
                    ParmVars.plog.debuglog(0, "read done");
                    MacroRequest.setVisible(true);
                } catch (IOException ex) {
                    ParmVars.plog.printException(ex);
                }
                * ***/
                //String reqmess = ParmGenUtil.LFinsert(pqr.request.getMessage());
                //MacroRequest.setText(reqmess);
                ParmGenTextDoc reqdoc = new ParmGenTextDoc(MacroRequest);
                byte[] binmess = pqr.request.getByteMessage();
                String reqmess = "";
                try {
                    reqmess = ParmGenUtil.LFinsert(new String(binmess, "ISO8859-1"));
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(MacroBuilderUI.class.getName()).log(Level.SEVERE, null, ex);
                    reqmess = "";
                }
                reqdoc.setText(reqmess);



                String resmess = ParmGenUtil.LFinsert( pqr.response.getMessage());
                //MacroResponse.setText(resmess);
                ParmGenTextDoc resdoc = new ParmGenTextDoc(MacroResponse);
                resdoc.setText(resmess);

                MacroComments.setText(pqr.getComments());

            }
        }

    }//GEN-LAST:event_RequestListValueChanged

    private void MBCookieUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBCookieUpdateActionPerformed
        // TODO add your handling code here:
        pmt.setMBCookieUpdate(MBCookieUpdate.isSelected());
    }//GEN-LAST:event_MBCookieUpdateActionPerformed

    private void MBCookieFromJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBCookieFromJarActionPerformed
        // TODO add your handling code here:
        pmt.setMBCookieFromJar(MBCookieFromJar.isSelected());
    }//GEN-LAST:event_MBCookieFromJarActionPerformed

    private void MBExecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBExecActionPerformed
        // TODO add your handling code here:
        pmt.setMBExec(MBExec.isSelected());
    }//GEN-LAST:event_MBExecActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        pmt.setWaitTimer(waitsec.getText());
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void FinalResponseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinalResponseActionPerformed
        // TODO add your handling code here:
        pmt.setMBFinalResponse(FinalResponse.isSelected());
    }//GEN-LAST:event_FinalResponseActionPerformed

    private void MBResetToOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBResetToOriginalActionPerformed
        // TODO add your handling code here:
        pmt.setMBResetToOriginal(MBResetToOriginal.isSelected());
    }//GEN-LAST:event_MBResetToOriginalActionPerformed

    private void RequestListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RequestListMousePressed
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_RequestListMousePressed

    private void disableRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableRequestActionPerformed
        // TODO add your handling code here:
        int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.DisableRequest(pos);
        }
        Redraw();
    }//GEN-LAST:event_disableRequestActionPerformed

    private void enableRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableRequestActionPerformed
        // TODO add your handling code here:
        int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.EnableRequest(pos);
        }
        Redraw();
    }//GEN-LAST:event_enableRequestActionPerformed

    private void RequestListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RequestListMouseClicked
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_RequestListMouseClicked

    private void RequestListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RequestListMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_RequestListMouseReleased

    private void targetRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetRequestActionPerformed
        // TODO add your handling code here:
        int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.setCurrentRequest(pos);
        }
        Redraw();
    }//GEN-LAST:event_targetRequestActionPerformed

    private void MBdeleteSetCookiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBdeleteSetCookiesActionPerformed
        // TODO add your handling code here:
        pmt.setMBdeletesetcookies(MBdeleteSetCookies.isSelected());
    }//GEN-LAST:event_MBdeleteSetCookiesActionPerformed

    private void ParamTrackingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamTrackingActionPerformed
        // TODO add your handling code here:
        //fileChooser起動
    	File cfile = new File(ParmVars.parmfile);
        String dirname = cfile.getParent();
        JFileChooser jfc = new JFileChooser(dirname) {

            @Override
            public void approveSelection() {
                File f = getSelectedFile();
                if (f.exists() && getDialogType() == SAVE_DIALOG) {
                    String m = String.format(
                            "<html>%s already exists.<br>Do you want to replace it?",
                            f.getAbsolutePath());
                    int rv = JOptionPane.showConfirmDialog(
                            this, m, "Save As", JOptionPane.YES_NO_OPTION);
                    if (rv != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
                super.approveSelection();
            }
        };
        ParmFileFilter pFilter = new ParmFileFilter();
        jfc.setFileFilter(pFilter);
        ArrayList<PRequestResponse> orglist = pmt.originalrlist;
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION && orglist!=null) {

            //code to handle choosed file here.
            File file = jfc.getSelectedFile();
            String name = file.getAbsolutePath().replaceAll("\\\\", "\\\\\\\\");
            ParmVars.parmfile = name;
            //エンコードの設定
            //ParmVars.encエンコードの決定
            //先頭ページのレスポンスのcharsetを取得
            PRequestResponse toppage = orglist.get(0);
            String tcharset = toppage.response.getCharset();
            ParmVars.enc = Encode.getEnum(tcharset);

            String tknames[] = {//予約語
                "PHPSESSID",
                "JSESSIONID",
                "SESID",
                "TOKEN",
                "_CSRF_TOKEN",
                "authenticity_token",
                "NONCE",
                "access_id",
                "fid",
                "ethna_csrf",
                "uniqid"
            };

            //token追跡自動設定。。
            //ArrayList<ParmGenToken> tracktokenlist = new ArrayList<ParmGenToken>();
            ArrayList<ParmGenResToken> urltokens = new ArrayList<ParmGenResToken>();
            Pattern patternw32 = Pattern.compile("\\w{32}");

            ArrayList<AppParmsIni> newparms = new ArrayList<AppParmsIni>();//生成するパラメータ
            PRequestResponse respqrs = null;
            int row = 0;
            int pos = 0;

            for (PRequestResponse pqrs : orglist) {
                HashMap<ParmGenTokenKey, String> addedtokens = new HashMap<ParmGenTokenKey, String>();
                for(ListIterator<ParmGenResToken> it = urltokens.listIterator(urltokens.size());it.hasPrevious();){
                //if (respqrs != null && tracktokenlist != null && tracktokenlist.size() > 0) {//直前のレスポンスに追跡パラメータあり
                    //リクエストにtracktokenlistのトークンが含まれる場合のみ
                    ParmGenResToken restoken = it.previous();
                    int fromStepNo = restoken.fromStepNo;
                    boolean RequesthasToken = false;
                    ArrayList<ParmGenToken> requesttokenlist = new ArrayList<ParmGenToken>();

                    for (ParmGenToken tkn : restoken.tracktokenlist) {
                        String token = tkn.getTokenKey().GetName();
                        if(!addedtokens.containsKey(tkn.getTokenKey())){
                            if (pqrs.request.hasQueryParam(token) || pqrs.request.hasBodyParam(token)) {
                            	boolean valid = false;
                            	switch(tkn.getTokenKey().GetTokenType()){
                            	case ACTION:
                            	case HREF:
                            		String srcurl = tkn.getTokenValue().getURL();
                            		String desturl = pqrs.request.getURL();
                            		ParmVars.plog.debuglog(0, "srcurl/desturl:" + srcurl + "/" + desturl);
                            		if(desturl.indexOf(srcurl)!=-1){
                            			valid = true;
                            		}
                            		break;
                            	default:
                            		valid = true;
                            		break;
                            	}
                            	if(valid){
	                                RequesthasToken = true;
	                                requesttokenlist.add(tkn);
	                                addedtokens.put(tkn.getTokenKey(), "");
                            	}
                            }
                        }
                    }

                    if (RequesthasToken) {
                        //パラメータ生成
                        AppParmsIni aparms = new AppParmsIni();
                        //request URL
                        String TargetURLRegex = ".*" + pqrs.request.getPath() + ".*";
                        boolean isformdata = pqrs.request.isFormData();
                        aparms.setUrl(TargetURLRegex);
                        aparms.len = 4;//default
                        aparms.typeval = aparms.T_TRACK;
                        aparms.inival = 0;
                        aparms.maxval = 0;
                        aparms.csvname = "";
                        aparms.pause = false;
                        aparms.parmlist = new ArrayList<AppValue>();

                        for (ParmGenToken tkn : requesttokenlist) {
                            AppValue apv = new AppValue();
                            String token = tkn.getTokenKey().GetName();
                            //body or query ターゲットリクエストのtokenパラメータ
                            String valtype = "query";
                            if (pqrs.request.hasBodyParam(token)) {
                                valtype = "body";
                            }
                            apv.setValPart(valtype);
                            apv.clearNoCount();
                            apv.csvpos = -1;
                            // (?:[&=?]+|^)token=(value)

                            String value = tkn.getTokenValue().getValue();
                            int len = value.length();
                            String reg = ".{" + len + "}";
                            String regex = "(?:[&=?]|^)" + token + "=(" + reg + ")";//埋め込み先の長さ設定が必要。
                            if (isformdata) {
                                regex = "(?:[A-Z].* name=\"" + ParmGenUtil.escapeRegexChars(token) + "\".*(?:\\r|\\n|\\r\\n))(?:[A-Z].*(?:\\r|\\n|\\r\\n)){0,}(?:\\r|\\n|\\r\\n)(?:.*?)(" + reg + ")";
                            }
                            apv.setURLencodedVal(regex);
                            apv.setresURL(".*" + restoken.request.getPath() + ".*");
                            apv.setresRegexURLencoded("");
                            int resvalpart = AppValue.V_AUTOTRACKBODY;
                            switch (tkn.getTokenKey().GetTokenType()) {
                                case LOCATION:
                                    resvalpart = AppValue.V_HEADER;
                                    break;
                                case XCSRF:
                                    break;
                                default:
                                    break;

                            }
                            apv.setresPartType(apv.getValPart(resvalpart));
                            apv.resRegexPos = tkn.getTokenKey().GetFcnt();
                            apv.token = token;
                            apv.urlencode = true;
                            if(MBfromStepNo.isSelected()){
                                apv.fromStepNo = fromStepNo;
                            }else{
                                apv.fromStepNo = -1;
                            }
                            
                            apv.toStepNo = pos;
                            apv.tokentype = tkn.getTokenKey().GetTokenType();
                            apv.col = aparms.parmlist.size();
                            aparms.parmlist.add(apv);
                        }
                        aparms.setRowAndCntFile(row);
                        row++;
                        aparms.crtGenFormat(true);
                        newparms.add(aparms);
                    }

                }

                //respqrs = pqrs;
                //レスポンストークン解析
                String body = pqrs.response.getBody();
                //レスポンスから追跡パラメータ抽出
                ParmGenParser pgparser = new ParmGenParser(body);
                ArrayList<ParmGenToken> bodytklist = pgparser.getNameValues();
                ParmGenArrayList tklist = new ParmGenArrayList();
                ParmGenResToken trackurltoken = new ParmGenResToken();
                trackurltoken.request = pqrs.request;
                trackurltoken.tracktokenlist = new ArrayList<ParmGenToken>();
                InterfaceCollection<ParmGenToken> ic = pqrs.response.getLocationTokens(tklist);
                //JSON parse
                ParmGenJSONDecoder jdecoder = new ParmGenJSONDecoder(body);
                ArrayList<ParmGenToken> jtklist = jdecoder.parseJSON2Token();

                tklist.addAll(bodytklist);
                tklist.addAll(jtklist);

                for (ParmGenToken token : tklist) {
                    //PHPSESSID, token, SesID, jsessionid

                    String tokenname = token.getTokenKey().GetName();
                    boolean namematched = false;
                    for (String tkn : tknames) {//予約語に一致
                        if (tokenname.equalsIgnoreCase(tkn)) {//完全一致
                            trackurltoken.tracktokenlist.add(token);
                            trackurltoken.fromStepNo = pos;
                            namematched = true;
                            break;
                        }
                    }
                    if (!namematched) {//nameはtknamesに一致しない
                        for (String tkn : tknames) {
                            if (tokenname.toUpperCase().indexOf(tkn.toUpperCase()) != -1) {//予約語に部分一致
                                trackurltoken.tracktokenlist.add(token);
                                trackurltoken.fromStepNo = pos;
                                namematched = true;
                                break;
                            }
                        }
                    }
                    // value値がToken値だとみられる
                    if (!namematched) {//nameはtknamesに一致しない
                        String tokenvalue = token.getTokenValue().getValue();

                        if (ParmGenUtil.isTokenValue(tokenvalue)) {
                            trackurltoken.tracktokenlist.add(token);
                            trackurltoken.fromStepNo = pos;
                        }
                    }

                }
                if(!trackurltoken.tracktokenlist.isEmpty()){
                    urltokens.add(trackurltoken);
                }
                pos++;
            }
            ParmVars.plog.debuglog(0, "newparms.size=" + newparms.size());
            if (newparms != null && !newparms.isEmpty()) {
                ParmGenCSV csv = new ParmGenCSV(newparms, pmt);
                csv.jsonsave();
            }
        }


    }//GEN-LAST:event_ParamTrackingActionPerformed

    private void ClearMacroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearMacroActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_ClearMacroActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LoadActionPerformed

    private void MBcleatokenfromcacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBcleatokenfromcacheActionPerformed
        // TODO add your handling code here:
        pmt.setMBcleartokencache(MBcleatokenfromcache.isSelected());
    }//GEN-LAST:event_MBcleatokenfromcacheActionPerformed

    private void RepeaterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RepeaterActionPerformed
        // TODO add your handling code here:
    	int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.setCurrentRequest(pos);
            pmt.sendToRepeater(pos);

        }
        Redraw();
    }//GEN-LAST:event_RepeaterActionPerformed

    private void ScannerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScannerActionPerformed
        // TODO add your handling code here:
    	int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.setCurrentRequest(pos);
            pmt.sendToScanner(pos);

        }
        Redraw();
    }//GEN-LAST:event_ScannerActionPerformed

    private void IntruderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IntruderActionPerformed
        // TODO add your handling code here:
    	int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.setCurrentRequest(pos);
            pmt.sendToIntruder(pos);

        }
        Redraw();
    }//GEN-LAST:event_IntruderActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveActionPerformed

    private void MacroRequestMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroRequestMousePressed
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            RequestEdit.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroRequestMousePressed

    private void MacroResponseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroResponseMousePressed
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            ResponseShow.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroResponseMousePressed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:
        String reg = "";
        //String orig = MacroRequest.getText();
        Document docreq = MacroRequest.getDocument();
        int rlen = docreq.getLength();
        try {
            String reqdata = docreq.getText(0, rlen);
            new ParmGenRegex(reg,reqdata).setVisible(true);
        } catch (BadLocationException ex) {
            Logger.getLogger(MacroBuilderUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_editActionPerformed

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        String reg = "";
        String orig = MacroResponse.getText();
        new ParmGenRegex(reg,orig).setVisible(true);
    }//GEN-LAST:event_showActionPerformed

    private void MacroRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroRequestMouseClicked
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            RequestEdit.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroRequestMouseClicked

    private void MacroRequestMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroRequestMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            RequestEdit.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroRequestMouseReleased

    private void MacroResponseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroResponseMouseClicked
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            ResponseShow.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        
    }//GEN-LAST:event_MacroResponseMouseClicked

    private void MacroResponseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroResponseMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            ResponseShow.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroResponseMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearMacro;
    private javax.swing.JCheckBox FinalResponse;
    private javax.swing.JMenuItem Intruder;
    private javax.swing.JButton Load;
    private javax.swing.JCheckBox MBCookieFromJar;
    private javax.swing.JCheckBox MBCookieUpdate;
    private javax.swing.JCheckBox MBExec;
    private javax.swing.JCheckBox MBResetToOriginal;
    private javax.swing.JCheckBox MBcleatokenfromcache;
    private javax.swing.JCheckBox MBdeleteSetCookies;
    private javax.swing.JCheckBox MBfromStepNo;
    private javax.swing.JTextArea MacroComments;
    private javax.swing.JEditorPane MacroRequest;
    private javax.swing.JTextArea MacroResponse;
    private javax.swing.JButton ParamTracking;
    private javax.swing.JMenuItem Repeater;
    private javax.swing.JPopupMenu RequestEdit;
    private javax.swing.JList RequestList;
    private javax.swing.JPopupMenu ResponseShow;
    private javax.swing.JButton Save;
    private javax.swing.JMenuItem Scanner;
    private javax.swing.JMenu SendTo;
    private javax.swing.JMenuItem disableRequest;
    private javax.swing.JMenuItem edit;
    private javax.swing.JMenuItem enableRequest;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane paramlog;
    private javax.swing.JMenuItem show;
    private javax.swing.JMenuItem targetRequest;
    private javax.swing.JTextField waitsec;
    // End of variables declaration//GEN-END:variables
}
