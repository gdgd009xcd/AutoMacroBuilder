/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package burp;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;

/**
 *
 * @author daike
 */
public class MacroBuilderUI extends javax.swing.JPanel {

    private static final ResourceBundle bundle = ResourceBundle.getBundle("burp/Bundle");

    ArrayList<PRequestResponse> rlist = null;
    ParmGenMacroTrace pmt = null;

    DefaultListModel<String> RequestListModel = null;

    /**
     * Creates new form MacroBuilderUI
     */
    public MacroBuilderUI(ParmGenMacroTrace _pmt) {
        pmt = _pmt;
        initComponents();
        RequestList.setCellRenderer(new MacroBuilderUIRequestListRender(this));
        RequestListModel = new DefaultListModel();
        RequestListModel.clear();
        RequestList.setModel(RequestListModel);

        pmt.setUI(this);


        
        pmt.setMBCookieFromJar(MBCookieFromJar.isSelected());
        pmt.setMBFinalResponse(FinalResponse.isSelected());
        pmt.setMBResetToOriginal(MBResetToOriginal.isSelected());
        

    }

    ParmGenMacroTrace getParmGenMacroTrace() {
        return pmt;
    }

    void clear() {
        //JListをクリアするには、modelのremove & jListへModelセットが必須。
        RequestListModel.removeAllElements();
        RequestList.setModel(RequestListModel);
        MacroRequest.setText("");
        MacroResponse.setText("");
        MacroComments.setText("");
        rlist = null;
        if (pmt != null) {
            pmt.clear();
        }
    }

    void addNewRequests(ArrayList<PRequestResponse> _rlist) {
        DefaultListModel lmodel = new DefaultListModel();
        AppParmsIni pini;
        if (_rlist != null) {
            rlist = _rlist;
            if (pmt != null) {
                pmt.setRecords(_rlist);
                pmt.ParseResponse();
            }
            Iterator<PRequestResponse> it = _rlist.iterator();
            int ii = 0;
            while (it.hasNext()) {

                //model.addRow(new Object[] {false, pini.url, pini.getIniValDsp(), pini.getLenDsp(), pini.getTypeValDsp(),pini.getAppValuesDsp(),pini.getCurrentValue()});
                PRequestResponse pqr = it.next();
                String url = pqr.request.url;
                lmodel.addElement((Object) (String.format("%03d",ii++) + '|' + url));
            }
            RequestList.setModel(lmodel);
        }

    }

    void updateCurrentReqRes() {
        int cpos = pmt.getCurrentRequest();
        if (rlist != null) {
            PRequestResponse pqr = rlist.get(cpos);
            if(pmt.isMBcurrentreqresdisplay()){
                String reqstr = pqr.request.getMessage();
                int len = ParmVars.displaylength > reqstr.length()?reqstr.length():ParmVars.displaylength;
                Document  reqdoc = ParmGenUtil.createDoc(reqstr.substring(0,len));
                if(reqdoc!=null){
                    MacroRequest.setDocument(reqdoc);
                }

                String resstr = pqr.response.getMessage();
                len = ParmVars.displaylength > resstr.length() ? resstr.length():ParmVars.displaylength;
                Document resdoc = ParmGenUtil.createDoc(resstr.substring(0,len));
                if(resdoc!=null){
                    MacroResponse.setDocument(resdoc);
                }
            }

            MacroComments.setText(pqr.getComments());
        }
    }

    public void Redraw() {
        //ListModel cmodel = RequestList.getModel();
        //RequestList.setModel(cmodel);
        RequestList.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        SendTo = new javax.swing.JMenu();
        Repeater = new javax.swing.JMenuItem();
        Scanner = new javax.swing.JMenuItem();
        Intruder = new javax.swing.JMenuItem();
        targetRequest = new javax.swing.JMenuItem();
        disableRequest = new javax.swing.JMenuItem();
        enableRequest = new javax.swing.JMenuItem();
        RequestEdit = new javax.swing.JPopupMenu();
        edit = new javax.swing.JMenuItem();
        ResponseShow = new javax.swing.JPopupMenu();
        show = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RequestList = new javax.swing.JList();
        paramlog = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        MacroRequest = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        MacroResponse = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        MacroComments = new javax.swing.JTextArea();
        ParamTracking = new javax.swing.JButton();
        custom = new javax.swing.JButton();
        ClearMacro = new javax.swing.JButton();
        Load = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        MBreplaceCookie = new javax.swing.JCheckBox();
        MBCookieFromJar = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        MBcleatokenfromcache = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jCheckBox2 = new javax.swing.JCheckBox();
        waitsec = new javax.swing.JTextField();
        MBResetToOriginal = new javax.swing.JCheckBox();
        MBfromStepNo = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        FinalResponse = new javax.swing.JCheckBox();

        SendTo.setText(bundle.getString("MacroBuilderUI.SENDTO.text")); // NOI18N

        Repeater.setText(bundle.getString("MacroBuilderUI.REPEATER.text")); // NOI18N
        Repeater.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RepeaterActionPerformed(evt);
            }
        });
        SendTo.add(Repeater);

        Scanner.setText(bundle.getString("MacroBuilderUI.SCANNER.text")); // NOI18N
        Scanner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScannerActionPerformed(evt);
            }
        });
        SendTo.add(Scanner);

        Intruder.setText(bundle.getString("MacroBuilderUI.INTRUDER.text")); // NOI18N
        Intruder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IntruderActionPerformed(evt);
            }
        });
        SendTo.add(Intruder);

        jPopupMenu1.add(SendTo);

        targetRequest.setText(bundle.getString("MacroBuilderUI.TARGETREQUEST.text")); // NOI18N
        targetRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetRequestActionPerformed(evt);
            }
        });
        jPopupMenu1.add(targetRequest);

        disableRequest.setText(bundle.getString("MacroBuilderUI.DISABLEREQUEST.text")); // NOI18N
        disableRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableRequestActionPerformed(evt);
            }
        });
        jPopupMenu1.add(disableRequest);

        enableRequest.setText(bundle.getString("MacroBuilderUI.ENABLEREQUEST.text")); // NOI18N
        enableRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableRequestActionPerformed(evt);
            }
        });
        jPopupMenu1.add(enableRequest);

        edit.setText(bundle.getString("MacroBuilderUI.REQUESTEDIT.text")); // NOI18N
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        RequestEdit.add(edit);

        show.setText(bundle.getString("MacroBuilderUI.RESPONSESHOW.text")); // NOI18N
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });
        ResponseShow.add(show);

        jPanel4.setPreferredSize(new java.awt.Dimension(871, 1180));

        jScrollPane1.setAutoscrolls(true);

        RequestList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        RequestList.setAutoscrolls(false);
        RequestList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RequestListMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RequestListMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RequestListMouseReleased(evt);
            }
        });
        RequestList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                RequestListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(RequestList);

        paramlog.setPreferredSize(new java.awt.Dimension(847, 300));

        MacroRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MacroRequestMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MacroRequestMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MacroRequestMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(MacroRequest);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
        );

        paramlog.addTab(bundle.getString("MacroBuilderUI.リクエスト.text"), jPanel1); // NOI18N

        MacroResponse.setColumns(20);
        MacroResponse.setRows(5);
        MacroResponse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MacroResponseMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MacroResponseMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MacroResponseMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(MacroResponse);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
        );

        paramlog.addTab(bundle.getString("MacroBuilderUI.レスポンス.text"), jPanel2); // NOI18N

        MacroComments.setColumns(20);
        MacroComments.setRows(5);
        jScrollPane5.setViewportView(MacroComments);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
        );

        paramlog.addTab(bundle.getString("MacroBuilderUI.追跡.text"), jPanel3); // NOI18N

        ParamTracking.setText(bundle.getString("MacroBuilderUI.追跡.text")); // NOI18N
        ParamTracking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParamTrackingActionPerformed(evt);
            }
        });

        custom.setText(bundle.getString("MacroBuilderUI.CUSTOM.text")); // NOI18N
        custom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customActionPerformed(evt);
            }
        });

        ClearMacro.setText(bundle.getString("MacroBuilderUI.クリア.text")); // NOI18N
        ClearMacro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearMacroActionPerformed(evt);
            }
        });

        Load.setText(bundle.getString("MacroBuilderUI.LOAD.text")); // NOI18N
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        Save.setText(bundle.getString("MacroBuilderUI.SAVE.text")); // NOI18N
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        jButton3.setText(bundle.getString("MacroBuilderUI.NOP.text")); // NOI18N
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText(bundle.getString("MacroBuilderUI.マクロリクエスト一覧.text")); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Cookies"));

        MBreplaceCookie.setText(bundle.getString("MacroBuilderUI.REPLACE COOKIE.text")); // NOI18N
        MBreplaceCookie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBreplaceCookieActionPerformed(evt);
            }
        });

        MBCookieFromJar.setText(bundle.getString("MacroBuilderUI.開始時COOKIE.JARから引き継ぐ.text")); // NOI18N
        MBCookieFromJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBCookieFromJarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MBreplaceCookie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MBCookieFromJar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MBreplaceCookie)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MBCookieFromJar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Tracking Params"));

        MBcleatokenfromcache.setText(bundle.getString("MacroBuilderUI.開始時TOKENをキャッシュから引き継ぐ.text")); // NOI18N
        MBcleatokenfromcache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBcleatokenfromcacheActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MBcleatokenfromcache, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(MBcleatokenfromcache)
                .addGap(0, 43, Short.MAX_VALUE))
        );

        jCheckBox2.setText("WaitTimer(sec)");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        waitsec.setText("0");

        MBResetToOriginal.setSelected(true);
        MBResetToOriginal.setText(bundle.getString("MacroBuilderUI.オリジナルにリセット.text")); // NOI18N
        MBResetToOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBResetToOriginalActionPerformed(evt);
            }
        });

        MBfromStepNo.setSelected(true);
        MBfromStepNo.setText(bundle.getString("MacroBuilderUI.追跡FROM設定.text")); // NOI18N

        jLabel1.setText("Other Options(Usually, you do not need chage options below.)");

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Pass back to the invoking tool"));

        FinalResponse.setSelected(true);
        FinalResponse.setText(bundle.getString("MacroBuilderUI.FINAL RESPONSE.text")); // NOI18N
        FinalResponse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinalResponseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(FinalResponse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(FinalResponse, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 722, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(custom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ClearMacro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ParamTracking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Load, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                    .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addComponent(waitsec, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(45, 45, 45))
                                .addComponent(MBResetToOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                .addComponent(MBfromStepNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 33, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
                    .addGap(149, 149, 149)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(paramlog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ParamTracking)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(custom)
                .addGap(18, 18, 18)
                .addComponent(ClearMacro)
                .addGap(10, 10, 10)
                .addComponent(Load)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(452, 452, 452)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(waitsec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(MBResetToOriginal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MBfromStepNo)
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(866, Short.MAX_VALUE)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(337, 337, 337)
                    .addComponent(paramlog, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(490, Short.MAX_VALUE)))
        );

        jScrollPane2.setViewportView(jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1165, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void customActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customActionPerformed
        // TODO add your handling code here:
        List<String> poslist = RequestList.getSelectedValuesList();
        if(rlist!=null){
            ArrayList <PRequestResponse> messages = new ArrayList<PRequestResponse>() ;
            for(String s: poslist){
                String[] values = s.split("[|]", 0);
                if(values.length>0){
                    int i = Integer.parseInt(values[0]);
                    PRequestResponse pqr = rlist.get(i);
                    messages.add(pqr);
                }
            }
            ParmGen pgen = new ParmGen(pmt);
            if(pgen.twin==null){
                    pgen.twin = new ParmGenTop(pmt, new ParmGenCSV(pmt,
                        messages)
                        );
            }
            pgen.twin.setVisible(true);
        }
    }//GEN-LAST:event_customActionPerformed

    private void RequestListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_RequestListValueChanged
        // TODO add your handling code here:

        int pos = RequestList.getSelectedIndex();
        if (pos != -1) {

            if (rlist != null && rlist.size() > pos) {
                //

                //DefaultListModel lmodel = new DefaultListModel();

                PRequestResponse pqr = rlist.get(pos);
/***
                Reader reqrd = new java.io.StringReader(ParmGenUtil.LFinsert(pqr.request.getMessage()));

                try {
                    MacroRequest.setVisible(false);
                    ParmVars.plog.debuglog(0, "before read");
                    ;
                    MacroRequest.read(reqrd, null);
                    ParmVars.plog.debuglog(0, "read done");
                    MacroRequest.setVisible(true);
                } catch (IOException ex) {
                    ParmVars.plog.printException(ex);
                }
                * ***/
                //String reqmess = ParmGenUtil.LFinsert(pqr.request.getMessage());
                //MacroRequest.setText(reqmess);
                ParmGenTextDoc reqdoc = new ParmGenTextDoc(MacroRequest);
                
                String reqmess = pqr.request.getMessage();
                
                reqdoc.setText(reqmess);



                String resmess = pqr.response.getMessage();
                //MacroResponse.setText(resmess);
                ParmGenTextDoc resdoc = new ParmGenTextDoc(MacroResponse);
                resdoc.setText(resmess);

                MacroComments.setText(pqr.getComments());

            }
        }

    }//GEN-LAST:event_RequestListValueChanged

    private void MBCookieFromJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBCookieFromJarActionPerformed
        // TODO add your handling code here:
        pmt.setMBCookieFromJar(MBCookieFromJar.isSelected());
    }//GEN-LAST:event_MBCookieFromJarActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        pmt.setWaitTimer(waitsec.getText());
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void FinalResponseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinalResponseActionPerformed
        // TODO add your handling code here:
        pmt.setMBFinalResponse(FinalResponse.isSelected());
    }//GEN-LAST:event_FinalResponseActionPerformed

    private void MBResetToOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBResetToOriginalActionPerformed
        // TODO add your handling code here:
        pmt.setMBResetToOriginal(MBResetToOriginal.isSelected());
    }//GEN-LAST:event_MBResetToOriginalActionPerformed

    private void RequestListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RequestListMousePressed
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_RequestListMousePressed

    private void disableRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableRequestActionPerformed
        // TODO add your handling code here:
        int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.DisableRequest(pos);
        }
        Redraw();
    }//GEN-LAST:event_disableRequestActionPerformed

    private void enableRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableRequestActionPerformed
        // TODO add your handling code here:
        int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.EnableRequest(pos);
        }
        Redraw();
    }//GEN-LAST:event_enableRequestActionPerformed

    private void RequestListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RequestListMouseClicked
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_RequestListMouseClicked

    private void RequestListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RequestListMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_RequestListMouseReleased

    private void targetRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetRequestActionPerformed
        // TODO add your handling code here:
        int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.setCurrentRequest(pos);
        }
        Redraw();
    }//GEN-LAST:event_targetRequestActionPerformed

    private void ParamTrackingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamTrackingActionPerformed
        // TODO add your handling code here:
        //fileChooser起動
    	File cfile = new File(ParmVars.parmfile);
        String dirname = cfile.getParent();
        JFileChooser jfc = new JFileChooser(dirname) {

            @Override
            public void approveSelection() {
                File f = getSelectedFile();
                if (f.exists() && getDialogType() == SAVE_DIALOG) {
                    String m = String.format(
                            "<html>%s already exists.<br>Do you want to replace it?",
                            f.getAbsolutePath());
                    int rv = JOptionPane.showConfirmDialog(
                            this, m, "Save As", JOptionPane.YES_NO_OPTION);
                    if (rv != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
                super.approveSelection();
            }
        };
        ParmFileFilter pFilter = new ParmFileFilter();
        jfc.setFileFilter(pFilter);
        ArrayList<PRequestResponse> orglist = pmt.originalrlist;
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION && orglist!=null) {

            //code to handle choosed file here.
            File file = jfc.getSelectedFile();
            String name = file.getAbsolutePath().replaceAll("\\\\", "\\\\\\\\");
            if(!pFilter.accept(file)){//拡張子無しの場合は付与
                name += ".json";
            }
            ParmVars.parmfile = name;
            //エンコードの設定
            //ParmVars.encエンコードの決定
            //先頭ページのレスポンスのcharsetを取得
            PRequestResponse toppage = orglist.get(0);
            String tcharset = toppage.response.getCharset();
            ParmVars.enc = Encode.getEnum(tcharset);

            String tknames[] = {//予約語
                "PHPSESSID",
                "JSESSIONID",
                "SESID",
                "TOKEN",
                "_CSRF_TOKEN",
                "authenticity_token",
                "NONCE",
                "access_id",
                "fid",
                "ethna_csrf",
                "uniqid",
                "oauth"
            };

            //token追跡自動設定。。
            //ArrayList<ParmGenToken> tracktokenlist = new ArrayList<ParmGenToken>();
            ArrayList<ParmGenResToken> urltokens = new ArrayList<ParmGenResToken>();
            Pattern patternw32 = Pattern.compile("\\w{32}");

            List<AppParmsIni> newparms = new ArrayList<AppParmsIni>();//生成するパラメータ
            PRequestResponse respqrs = null;
            int row = 0;
            int pos = 0;

            for (PRequestResponse pqrs : orglist) {
                HashMap<ParmGenTokenKey, String> addedtokens = new HashMap<ParmGenTokenKey, String>();
                for(ListIterator<ParmGenResToken> it = urltokens.listIterator(urltokens.size());it.hasPrevious();){
                //if (respqrs != null && tracktokenlist != null && tracktokenlist.size() > 0) {//直前のレスポンスに追跡パラメータあり
                    //リクエストにtracktokenlistのトークンが含まれる場合のみ
                    ParmGenResToken restoken = it.previous();
                    int fromStepNo = restoken.fromStepNo;
                    boolean RequesthasToken = false;
                    ArrayList<ParmGenToken> requesttokenlist = new ArrayList<ParmGenToken>();

                    for (ParmGenToken tkn : restoken.tracktokenlist) {
                        String token = tkn.getTokenKey().GetName();
                        if(!addedtokens.containsKey(tkn.getTokenKey())){
                            if (pqrs.request.hasQueryParam(token) || pqrs.request.hasBodyParam(token)) {
                            	boolean valid = false;
                            	switch(tkn.getTokenKey().GetTokenType()){
                            	case ACTION:
                            	case HREF:
                                    
                                    ParmGenParseURL _psrcurl = new ParmGenParseURL(tkn.getTokenValue().getURL());
                                    ParmGenParseURL _pdesturl = new ParmGenParseURL(pqrs.request.getURL());
                                    String srcurl = _psrcurl.getPath();
                                    String desturl = _pdesturl.getPath();
                                    ParmVars.plog.debuglog(0, "srcurl|desturl:[" + srcurl + "]|[" + desturl + "]");
                                    if(desturl.indexOf(srcurl)!=-1){
                                            valid = true;
                                    }
                                    break;
                            	default:
                                    valid = true;
                                    break;
                            	}
                            	if(valid){
                                    RequesthasToken = true;
                                    requesttokenlist.add(tkn);
                                    addedtokens.put(tkn.getTokenKey(), "");
                            	}
                            }
                        }
                    }

                    if (RequesthasToken) {
                        //パラメータ生成
                        AppParmsIni aparms = new AppParmsIni();
                        //request URL
                        String TargetURLRegex = ".*" + pqrs.request.getPath() + ".*";
                        boolean isformdata = pqrs.request.isFormData();
                        aparms.setUrl(TargetURLRegex);
                        aparms.len = 4;//default
                        aparms.typeval = aparms.T_TRACK;
                        aparms.inival = 0;
                        aparms.maxval = 0;
                        aparms.csvname = "";
                        aparms.pause = false;
                        aparms.parmlist = new ArrayList<AppValue>();

                        for (ParmGenToken tkn : requesttokenlist) {
                            AppValue apv = new AppValue();
                            String token = tkn.getTokenKey().GetName();
                            //body or query ターゲットリクエストのtokenパラメータ
                            String valtype = "query";
                            ParmGenToken tkparam = pqrs.request.getBodyToken(token);
                            if(tkparam!=null){
                                valtype = "body";
                            }else{
                                tkparam = pqrs.request.getQueryToken(token);
                            }
                            
                            apv.setValPart(valtype);
                            apv.clearNoCount();
                            apv.csvpos = -1;
                            // (?:[&=?]+|^)token=(value)

                            String value = tkn.getTokenValue().getValue();
                            apv.resFetchedValue = value;
                            int len = value.length();
                            String paramname = token;
                            if(tkparam!=null){
                                int rlen = tkparam.getTokenValue().getValue().length();
                                if(len<rlen) len = rlen;
                                paramname = tkparam.getTokenKey().GetName();
                            }
                            
                            String reg = ".{" + len + "}";
                            
                            String wwwurlreg = "[^&=]+";
                            String regex = "(?:[&=?]|^)" + paramname + "=(" + wwwurlreg + ")";//埋め込み先の長さ設定が必要。
                            if (isformdata) {
                                regex = "(?:[A-Z].* name=\"" + ParmGenUtil.escapeRegexChars(paramname) + "\".*(?:\\r|\\n|\\r\\n))(?:[A-Z].*(?:\\r|\\n|\\r\\n)){0,}(?:\\r|\\n|\\r\\n)(?:.*?)(" + reg + ")";
                            }
                            String encodedregex = regex;
                            try {
                                encodedregex = URLEncoder.encode(regex, ParmVars.enc.getIANACharset());
                            } catch (UnsupportedEncodingException ex) {
                                Logger.getLogger(MacroBuilderUI.class.getName()).log(Level.SEVERE, null, ex);
                               
                            }
                            apv.setURLencodedVal(encodedregex);
                            apv.setresURL(".*" + restoken.request.getPath() + ".*");
                            apv.setresRegexURLencoded("");
                            int resvalpart = AppValue.V_AUTOTRACKBODY;
                            switch (tkn.getTokenKey().GetTokenType()) {
                            case LOCATION:
                                resvalpart = AppValue.V_HEADER;
                                break;
                            case XCSRF:
                                break;
                            default:
                                break;

                            }
                            apv.setresPartType(apv.getValPart(resvalpart));
                            apv.resRegexPos = tkn.getTokenKey().GetFcnt();
                            apv.token = token;
                            apv.urlencode = true;
                            if(MBfromStepNo.isSelected()){
                                apv.fromStepNo = fromStepNo;
                            }else{
                                apv.fromStepNo = -1;
                            }
                            
                            apv.toStepNo = pos;
                            apv.tokentype = tkn.getTokenKey().GetTokenType();
                            apv.col = aparms.parmlist.size();
                            apv.setEnabled(tkn.isEnabled());
                            aparms.parmlist.add(apv);
                        }
                        aparms.setRowAndCntFile(row);
                        row++;
                        aparms.crtGenFormat(true);
                        newparms.add(aparms);
                    }

                }

                //respqrs = pqrs;
                //レスポンストークン解析
                String body = pqrs.response.getBody();
                //レスポンスから追跡パラメータ抽出
                ParmGenParser pgparser = new ParmGenParser(body);
                ArrayList<ParmGenToken> bodytklist = pgparser.getNameValues();
                ParmGenArrayList tklist = new ParmGenArrayList();
                ParmGenResToken trackurltoken = new ParmGenResToken();
                trackurltoken.request = pqrs.request;
                trackurltoken.tracktokenlist = new ArrayList<ParmGenToken>();
                InterfaceCollection<ParmGenToken> ic = pqrs.response.getLocationTokens(tklist);
                //JSON parse
                ParmGenJSONDecoder jdecoder = new ParmGenJSONDecoder(body);
                ArrayList<ParmGenToken> jtklist = jdecoder.parseJSON2Token();

                tklist.addAll(bodytklist);
                tklist.addAll(jtklist);

                for (ParmGenToken token : tklist) {
                    //PHPSESSID, token, SesID, jsessionid
                    String tokenname = token.getTokenKey().GetName();
                    boolean namematched = false;
                    for (String tkn : tknames) {//予約語に一致
                        if (tokenname.equalsIgnoreCase(tkn)) {//完全一致
                            namematched = true;
                            break;
                        }
                    }
                    if (!namematched) {//nameはtknamesに一致しない
                        for (String tkn : tknames) {
                            if (tokenname.toUpperCase().indexOf(tkn.toUpperCase()) != -1) {//予約語に部分一致
                                namematched = true;
                                break;
                            }
                        }
                    }
                    // value値がToken値だとみられる
                    if (!namematched) {//nameはtknamesに一致しない
                        String tokenvalue = token.getTokenValue().getValue();

                        if (ParmGenUtil.isTokenValue(tokenvalue)) {
                            namematched = true;
                        }
                    }
                    token.setEnabled(namematched);
                    trackurltoken.tracktokenlist.add(token);
                    trackurltoken.fromStepNo = pos;

                }
                if(!trackurltoken.tracktokenlist.isEmpty()){
                    urltokens.add(trackurltoken);
                }
                pos++;
            }
            ParmVars.plog.debuglog(0, "newparms.size=" + newparms.size());
            new ParmGenTokenJDialog(null, false, newparms, pmt).setVisible(true);
            
        }


    }//GEN-LAST:event_ParamTrackingActionPerformed

    private void ClearMacroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearMacroActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_ClearMacroActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        // TODO add your handling code here:
        File cfile = new File(ParmVars.parmfile);
        String dirname = cfile.getParent();
        JFileChooser jfc = new JFileChooser(dirname);
        jfc.setSelectedFile(cfile);
        ParmFileFilter pFilter=new ParmFileFilter();
        jfc.setFileFilter(pFilter);
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            //code to handle choosed file here.
            File file = jfc.getSelectedFile();
            String name = file.getAbsolutePath().replaceAll("\\\\", "\\\\\\\\");
            ParmVars.parmfile = name;
            ParmGen pgen = new ParmGen(pmt, null);
            pgen.reset();//再読み込み
        }
        
    }//GEN-LAST:event_LoadActionPerformed

    private void MBcleatokenfromcacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBcleatokenfromcacheActionPerformed
        // TODO add your handling code here:
        pmt.setMBcleartokencache(MBcleatokenfromcache.isSelected());
    }//GEN-LAST:event_MBcleatokenfromcacheActionPerformed

    private void RepeaterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RepeaterActionPerformed
        // TODO add your handling code here:
    	int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.setCurrentRequest(pos);
            pmt.sendToRepeater(pos);

        }
        Redraw();
    }//GEN-LAST:event_RepeaterActionPerformed

    private void ScannerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScannerActionPerformed
        // TODO add your handling code here:
    	int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.setCurrentRequest(pos);
            pmt.sendToScanner(pos);

        }
        Redraw();
    }//GEN-LAST:event_ScannerActionPerformed

    private void IntruderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IntruderActionPerformed
        // TODO add your handling code here:
    	int pos = RequestList.getSelectedIndex();
        if (pos != -1) {
            pmt.setCurrentRequest(pos);
            pmt.sendToIntruder(pos);

        }
        Redraw();
    }//GEN-LAST:event_IntruderActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        File cfile = new File(ParmVars.parmfile);
        String dirname = cfile.getParent();
        JFileChooser jfc = new JFileChooser(dirname);
        jfc.setSelectedFile(cfile);
        ParmFileFilter pFilter=new ParmFileFilter();
        jfc.setFileFilter(pFilter);
        if(jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            //code to handle choosed file here.
            File file = jfc.getSelectedFile();
            String name = file.getAbsolutePath().replaceAll("\\\\", "\\\\\\\\");
            if(!pFilter.accept(file)){//拡張子無しの場合は付与
                name += ".json";
            }
            ParmVars.parmfile = name;
             //csv.save();
             ParmGenCSV csv = new ParmGenCSV(null, pmt);
             csv.jsonsave();
            
        }
    }//GEN-LAST:event_SaveActionPerformed

    private void MacroRequestMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroRequestMousePressed
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            RequestEdit.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroRequestMousePressed

    private void MacroResponseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroResponseMousePressed
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            ResponseShow.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroResponseMousePressed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:
        String reg = "";
        //String orig = MacroRequest.getText();
        Document docreq = MacroRequest.getDocument();
        int rlen = docreq.getLength();
        try {
            String reqdata = docreq.getText(0, rlen);
            new ParmGenRegex(reg,reqdata).setVisible(true);
        } catch (BadLocationException ex) {
            Logger.getLogger(MacroBuilderUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_editActionPerformed

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        String reg = "";
        String orig = MacroResponse.getText();
        new ParmGenRegex(reg,orig).setVisible(true);
    }//GEN-LAST:event_showActionPerformed

    private void MacroRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroRequestMouseClicked
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            RequestEdit.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroRequestMouseClicked

    private void MacroRequestMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroRequestMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            RequestEdit.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroRequestMouseReleased

    private void MacroResponseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroResponseMouseClicked
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            ResponseShow.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        
    }//GEN-LAST:event_MacroResponseMouseClicked

    private void MacroResponseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MacroResponseMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            ResponseShow.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_MacroResponseMouseReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void MBreplaceCookieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBreplaceCookieActionPerformed
        // TODO add your handling code here:
        pmt.setMBreplaceCookie(MBreplaceCookie.isSelected());
    }//GEN-LAST:event_MBreplaceCookieActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearMacro;
    private javax.swing.JCheckBox FinalResponse;
    private javax.swing.JMenuItem Intruder;
    private javax.swing.JButton Load;
    private javax.swing.JCheckBox MBCookieFromJar;
    private javax.swing.JCheckBox MBResetToOriginal;
    private javax.swing.JCheckBox MBcleatokenfromcache;
    private javax.swing.JCheckBox MBfromStepNo;
    private javax.swing.JCheckBox MBreplaceCookie;
    private javax.swing.JTextArea MacroComments;
    private javax.swing.JEditorPane MacroRequest;
    private javax.swing.JTextArea MacroResponse;
    private javax.swing.JButton ParamTracking;
    private javax.swing.JMenuItem Repeater;
    private javax.swing.JPopupMenu RequestEdit;
    private javax.swing.JList RequestList;
    private javax.swing.JPopupMenu ResponseShow;
    private javax.swing.JButton Save;
    private javax.swing.JMenuItem Scanner;
    private javax.swing.JMenu SendTo;
    private javax.swing.JButton custom;
    private javax.swing.JMenuItem disableRequest;
    private javax.swing.JMenuItem edit;
    private javax.swing.JMenuItem enableRequest;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane paramlog;
    private javax.swing.JMenuItem show;
    private javax.swing.JMenuItem targetRequest;
    private javax.swing.JTextField waitsec;
    // End of variables declaration//GEN-END:variables
}
